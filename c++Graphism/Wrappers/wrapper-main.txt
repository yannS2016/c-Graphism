// get initial processor time used by program
    std::clock_t startTime = std::clock();
    BGIWidget *mainWindow = new BGIWidget("BGIWidget",400,350);
    BGIPen *pen = new BGIPen(BGIColor::BROWN,1,BGIPenStyle::DASHED_LINE);
    std::cout << pen->getStyle()<<std::endl;
    //circle(50,50,50);
    //pen->setWidth(2);
    //std::cout << pen->getPenWidth() <<std::endl;
    //pen->setColor(BGIColor::BLUE);
    //setlinestyle(BGIPenStyle::DASHED_LINE,0,2);
    //pen->setStyle(BGIPenStyle::DOTTED_LINE);
    circle(50,160,50);
    //std::cout <<"Pen width is: " << pen->getPenWidth() << std::endl;
//    BGIPen pen(1,1,1,1);
    //BGISize *drawSize = new BGISize(mainWindow.drawAreaSizes());
    std::cout << " Sizes are: " << mainWindow->getWidth()<<"  " << mainWindow->getHeight()<< std::endl;
    //pthread_join(mainWindow.updateSizes(),NULL);
    bool maxi = false;
    while(!maxi){
        //std::cout << mainWindow.getWidth() << "  " << mainWindow.getHeight() << std::endl;
        if(mainWindow->isMaximized()){
            BGISize *drawSize  = mainWindow->refDrawSizes();
            //BGISize drawSize  = &(mainWindow.drawAreaSizes());
            std::cout << "Screen was maximized! new sizes are: " << drawSize->getWidth() <<"  " <<drawSize->getHeight() << std::endl;
            maxi = true;
        }
        delay(100);// give processor some time
    }
    delete mainWindow;
    //mainWindow.setWidth(400);
    //std::cout << std::fixed << std::setprecision(2) << "CPU time used: "
    //          << 1000.0 * (std::clock()-startTime) / CLOCKS_PER_SEC << " ms\n" ;
    return 0;